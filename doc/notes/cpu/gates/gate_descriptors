To provide controlled access to code segments with different privilege levels,
the processor provides a special set of descriptors called gate descriptors. 
There are four kinds of gate descriptors:
	* Call gates
	* Trap gates
	* Interrupt gates
	* Task gates


Call gates
----------
Call gates facilitate controlled transfers of program control between different
privilege levels. They are typically used only in operating systems or 
executives that use the privilege-level protection mechanism. Call gates are 
also useful for transferring program control between 16-bit and 32-bit code
segments.

A call-gate descriptor may reside in the GDT or in an LDT, but not in the 
interrupt descriptor table (IDT). It performs six functions:
	* It specifies the code segment to be accessed.
	* It defines an entry point for a procedure in the specified code 
	segment
	* It specifies the privilege level required for a caller trying to
	access the procedure.
	* If a stack switch occurs, it specifies the number of optional 
	parameters to be copied between stacks.
	* It defines the size of values to be pushed onto the target stack;
	16-bit gates force 16-bit pushes and 32-bit gates force 32-bit pushes.
	* it specifies whether the call-gate descriptor is valid.

	Call-Gate Descriptor
 +----------------------------------------------------------------------------+
 |                                                                            |
 |  31                            16 15    13 12    8 7     5 4      0        |
 |  +-----------------------------------------------------------------+       |
 |  |  Offset in Segment 31:16      | P| DPL |  |type |       | Param.| 4     |
 |  |                               |  |     |0 |1100 |  0 0 0| Count |       |
 |  +-----------------------------------------------------------------+       |
 |                                                                            |
 |  31                            16 15    13 12    8 7     5 4      0        |
 |  +-----------------------------------------------------------------+       |
 |  |  Segment Selector             |   Offset in Segmnet 15:00       | 0     |
 |  |                               |                                 |       |
 |  +-----------------------------------------------------------------+       |
 |                                                                            |
 |       DPL  Descriptor Privilege Level                                      |
 |       P    Gate vaild                                                      |
 |                                                                            |
 +----------------------------------------------------------------------------+


The segment selector field in a call gate specifies the code segment to be 
accessed. The offset field specifies the entry point in the code segemnt.
This entry point is generally to the first instruction of a specific procedure.
The DPL field indicates the privilege level of the call gate, which is in turn
is the privilege level required to access the selected procedure through the 
gate. The P flag indicates whether the call-gate descriptor is valid. (The
presence of the code segment to which the gate points is indicated by the P 
flag in the code segment's descriptor.) The parameter count field indicates the
number of parameters to copy from the calling procedures stack to the new stack
if a stack switch occurs. The parameter count specifies the number of words for
16-bit call gates and doublewords for 32-bit call gates.

The P flag in a gate descriptor is normally always set to 1. If it is set to 0,
a not present (#NP) exception is generated when a program attempts to access 
the descriptor. The oprating system can use the P flag for special purposed. 
For example, it could be used to track the number of times the gate is used. 
Here the P flag is initally set to 0 causing a trap to the not-present 
exception handler. The exception handler then increments a counter and sets the
P flag to 1, so that on returning from the handler, the gate descriptor will be
valid.

